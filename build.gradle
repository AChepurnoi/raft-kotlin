buildscript {
    ext.kotlin_version = '1.3.20'
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20' apply false
    id 'jacoco'
}

repositories {
    mavenCentral()
    jcenter()
}


subprojects {


    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "jacoco"
    group 'ucu'
    version '1'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type", "-Xuse-experimental=kotlin.Experimental"]


    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type", "-Xuse-experimental=kotlin.Experimental"]
    }

}

jacoco {
    toolVersion = "0.8.3"
}

task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/report.xml"

    }

    afterEvaluate {
//        Filter whitelisted packages
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it).filter { file ->
                !['grpc',
                  'example',
                  'config']
                        .stream()
                        .map { file.path.contains(it) }
                        .any()
            }
        })
    }
}


// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}